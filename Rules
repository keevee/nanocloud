#!/usr/bin/env ruby
#
# FIXME: 
# - use config[:text_entensions] instead of explicit enumeration of binaries
#

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

RAW_FILES       = %w{ sass coffee }
MEDIA           = %w{ png jpg jpeg gif ico pdf mp4 mov webm svg woff2}
COMPILED_FILES  = %w{ js css html txt cur }

# preprocessing, here we are setting up the category pages and the submenu for categorized pages
preprocess do
  eval File.read('rules_preprocess.rb') if File.exist? 'rules_preprocess.rb'

  @items.each do |item|
    item[:layouts] = ['nc-redirect'] if item[:redirect]
  end
end

# compile rules

eval File.read('rules_compile.rb') if File.exist? 'rules_compile.rb'

compile '/*' do
  # compile phase
  case item[:extension]
    when 'coffee'
      filter :erb
      filter :coffee
      filter :cache_buster
    when 'sass'
      filter :erb
      filter :sass
      filter :cache_buster
    when 'css', 'js'
      filter :cache_buster
    when 'md'
      filter :kramdown
    when 'slim'
      filter :slim
  end

  # layout phase
  case item[:extension]
    when 'md', 'slim'
      if item[:layouts]
        item[:layouts].each{|l| layout l }
      else
        layout 'default'
      end
      filter :cache_buster
  end
end

# routing rules

route '*' do
  case item[:extension]
    when *RAW_FILES
      fp = cachebust?(item) ? fingerprint(item[:filename]) : ''
      ext = item[:extension]
      ext = 'js'  if ext == 'coffee'
      ext = 'css' if ext == 'sass'
      item.identifier.chop + fp + '.' + ext
    when *COMPILED_FILES
      item.identifier.chop + '.' + item[:extension]
    when *MEDIA
      p item
      # for images you do not want fingerprinted, like constructed in js, add "nocache" somewhere inside the path
      fp = (item[:filename] =~ /nocache/) ? '' : fingerprint(item[:filename])
      item.identifier.chop + fp + '.' + item[:extension]
    else
      item[:route] || item.identifier + 'index.html'
  end
end

# layout rules

layout '*', :slim
